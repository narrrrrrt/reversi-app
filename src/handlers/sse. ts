import { createRoom } from "../schema/initial";
import { Room } from "../schema/types";

// ルームごとの状態管理
export const rooms = new Map<number, Room>();
const clients = new Map<number, Set<WritableStreamDefaultWriter>>();

export async function handleSSE(request: Request): Promise<Response> {
  // id を一発でパース、なければ 400
  const id = Number(new URL(request.url).searchParams.get("id"));
  if (!id) return new Response("Invalid room id", { status: 400 });

  // ルームが存在しなければ初期化
  if (!rooms.has(id)) {
    rooms.set(id, createRoom(id));
  }

  const stream = new TransformStream();
  const writer = stream.writable.getWriter();

  // クライアントを登録
  if (!clients.has(id)) clients.set(id, new Set());
  clients.get(id)!.add(writer);

  // 初期値を即送信
  const room = rooms.get(id)!;
  writer.write(`data: ${JSON.stringify(room)}\n\n`);

  return new Response(stream.readable, {
    headers: {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      "Connection": "keep-alive",
    },
  });
}

// 他のイベントから呼び出して broadcast する用
export function broadcast(id: number, room: Room) {
  const writers = clients.get(id);
  if (!writers) return;
  for (const w of writers) {
    w.write(`data: ${JSON.stringify(room)}\n\n`);
  }
}